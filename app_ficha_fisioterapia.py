import streamlit as st
from streamlit_webrtc import webrtc_streamer, AudioProcessorBase, WebRtcMode, RTCConfiguration
import av
import whisper
import numpy as np
from datetime import datetime
import os
import re
import pdfplumber

# --- Configura√ß√µes iniciais da P√°gina Streamlit ---
st.set_page_config(page_title="Ficha Atendimento - Fisioterapia", layout="centered")

# --- Defini√ß√£o dos Campos da Ficha e Ordem para Navega√ß√£o ---
# Mapeia nomes amig√°veis (que o profissional falar√°) para chaves de sess√£o (usadas no c√≥digo)
# A ordem aqui define a sequ√™ncia do comando "pr√≥ximo campo"
FORM_FIELDS_MAP = {
    "localizacao e caracteristicas do sintoma": "sintomas_localizacao",
    "cirurgias traumatismos parto": "cirurgias_traumatismos_parto",
    "sono": "sono",
    "atividade fisica": "atividade_fisica",
    "condicoes gerais": "condicoes_gerais",
    "alimentacao": "alimentacao",
    "alergias": "alergias",
    "emocional": "emocional",
    "medicacao": "medicacao",
    # Adicione mais campos se sua ficha tiver outros t√≥picos grandes de texto
}

# Lista ordenada das chaves dos campos para navega√ß√£o "pr√≥ximo campo"
FORM_FIELDS_ORDER = list(FORM_FIELDS_MAP.values())

# --- Inicializa√ß√£o de Estados da Sess√£o Streamlit ---
# Garante que as vari√°veis de estado existam para evitar KeyError

# Estado de login
if "logado" not in st.session_state:
    st.session_state.logado = False

# Armazenamento de fichas PDF padr√£o (nome amig√°vel -> texto extra√≠do)
if "fichas_pdf" not in st.session_state:
    st.session_state.fichas_pdf = {
        "ficha de anamnese": "Este √© o modelo de texto da ficha de anamnese. Inclua hist√≥rico m√©dico, queixas principais, cirurgias pr√©vias e medicamentos em uso.",
        "ficha de avalia√ß√£o ortop√©dica": "Este √© o modelo de texto da ficha de avalia√ß√£o ortop√©dica. Detalhe exame f√≠sico, testes espec√≠ficos, postura, marcha e ADMs.",
        # Adicione outros modelos de ficha PDF aqui, eles ser√£o carregados no in√≠cio do app
    }

# Simula√ß√£o de um "banco de dados" de pacientes e suas fichas
# Na vida real, isso viria de um banco de dados persistente ou API
if "pacientes" not in st.session_state:
    st.session_state.pacientes = {
        "joao silva": {"anamnese": "Hist√≥rico do Jo√£o: dor no ombro direito h√° 3 meses, sem cirurgias, usa analg√©sicos esporadicamente.", "avaliacao_ortopedica": "Jo√£o Silva, 45 anos, dor ao levantar o bra√ßo, ADM reduzida em abdu√ß√£o. Testes de manguito rotador positivos."},
        "maria souza": {"anamnese": "Hist√≥rico da Maria: lombalgia cr√¥nica, p√≥s-operat√≥rio de h√©rnia de disco h√° 2 anos, faz uso cont√≠nuo de anti-inflamat√≥rios.", "avaliacao_postural": "Maria Souza, 60 anos, assimetria p√©lvica, hipercifose tor√°cica."},
    }

# Estado para controlar qual tipo de ficha (padr√£o/paciente/nova) est√° aberta
if "tipo_ficha_aberta" not in st.session_state:
    st.session_state.tipo_ficha_aberta = None

# Estado para armazenar o paciente atualmente selecionado
if "paciente_atual" not in st.session_state:
    st.session_state.paciente_atual = None

# Estado para o ditado geral (se n√£o houver campo espec√≠fico ativo)
if "transcricao_geral" not in st.session_state:
    st.session_state.transcricao_geral = ""

# Estado para exibir o √∫ltimo segmento transcrito (feedback visual)
if "last_transcription_segment" not in st.session_state:
    st.session_state.last_transcription_segment = ""

# Estado para controlar qual campo do formul√°rio est√° ativo para ditado por voz
if "active_form_field" not in st.session_state:
    st.session_state.active_form_field = None # Nenhum campo ativo inicialmente

# NOVO: Estado para controlar se a anota√ß√£o por voz est√° ativa ou pausada
if "listening_active" not in st.session_state:
    st.session_state.listening_active = True # Come√ßa escutando

# NOVO: Estado para a mensagem de status do microfone
if "mic_status_message" not in st.session_state:
    st.session_state.mic_status_message = "üî¥ Microfone Desconectado"

# NOVO: Estado para controlar a inicializa√ß√£o do webrtc_streamer
if "webrtc_initialized" not in st.session_state:
    st.session_state.webrtc_initialized = False


# Inicializa todos os campos do formul√°rio definidos em FORM_FIELDS_MAP
for key in FORM_FIELDS_MAP.values():
    if key not in st.session_state:
        st.session_state[key] = "" # Cada campo come√ßa como string vazia

# --- Fun√ß√µes de Login ---
def login():
    st.title("üîê Login")
    user = st.text_input("Usu√°rio")
    pwd = st.text_input("Senha", type="password")
    if st.button("Entrar"):
        if user == "fisioterapeuta" and pwd == "1234":
            st.session_state.logado = True
            st.rerun() # Atualiza a p√°gina ap√≥s o login
        else:
            st.error("Usu√°rio ou senha incorretos")

# Se n√£o estiver logado, exibe a tela de login e para a execu√ß√£o do restante do app
if not st.session_state.logado:
    login()
    st.stop()

# --- Carregar modelo Whisper uma √∫nica vez (em cache para performance) ---
@st.cache_resource
def carregar_modelo():
    st.info("Carregando modelo Whisper (pode levar alguns segundos)...")
    # Tenta carregar o modelo "base.en" primeiro, depois "base"
    try:
        model = whisper.load_model("base.en") # Pode ser mais leve e suficiente para comandos em ingl√™s
        st.success("Modelo Whisper 'base.en' carregado!")
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel carregar 'base.en': {e}. Tentando 'base' (maior).")
        model = whisper.load_model("base") # Carrega o modelo "base" do Whisper
        st.success("Modelo Whisper 'base' carregado!")
    return model

model = carregar_modelo()

# --- Fun√ß√£o para corre√ß√£o de termos comuns na transcri√ß√£o ---
def corrigir_termos(texto):
    correcoes = {
        "tendinite": "tendinite",
        "cervicalgia": "cervicalgia",
        "lombar": "regi√£o lombar",
        "reabilita√ß√£o funcional": "reabilita√ß√£o funcional",
        "fisioterapia do ombro": "fisioterapia de ombro",
        "dor nas costas": "algia na coluna",
        # Adicione mais corre√ß√µes conforme necess√°rio
    }
    # Aplica as corre√ß√µes. O replace √© case-sensitive, ent√£o a transcri√ß√£o √© normalizada para min√∫sculas antes.
    for errado, certo in correcoes.items():
        texto = texto.replace(errado, certo)
    return texto

# --- CLASSE PARA PROCESSAMENTO DE √ÅUDIO (CORE DA TRANSCRI√á√ÉO E COMANDOS DE VOZ) ---
class AudioProcessor(AudioProcessorBase):
    def __init__(self) -> None:
        self.buffer = b"" # Buffer para acumular √°udio

    def recv(self, frame: av.AudioFrame) -> av.AudioFrame:
        pcm = frame.to_ndarray().flatten().astype(np.float32).tobytes()
        self.buffer += pcm

        # Processa o buffer a cada 5 segundos de √°udio acumulado
        if len(self.buffer) > 32000 * 5: # 32000 samples/seg * 5 segundos
            audio_np = np.frombuffer(self.buffer, np.float32)
            audio_np = whisper.pad_or_trim(audio_np) # Ajusta o tamanho do √°udio para o Whisper
            mel = whisper.log_mel_spectrogram(audio_np).to(model.device) # Converte para mel spectrogram
            options = whisper.DecodingOptions(language="pt", fp16=False) # Op√ß√µes de decodifica√ß√£o (portugu√™s)
            result = whisper.decode(model, mel, options) # Decodifica o √°udio para texto
            
            # Corrige e normaliza o texto transcrito
            texto_transcrito_segmento = corrigir_terms(result.text).strip()
            st.session_state.last_transcription_segment = texto_transcrito_segmento # Atualiza feedback visual
            
            comando_processado = False
            texto_transcrito_lower = texto_transcrito_segmento.lower() # Para facilitar a compara√ß√£o de comandos

            # --- NOVO: L√≥gica de Comandos de Pausa/Retomada ---
            if "pausar anota√ß√£o" in texto_transcrito_lower:
                st.session_state.listening_active = False
                st.session_state.last_transcription_segment = "" # Limpa para n√£o mostrar o comando
                # N√£o st.rerun() aqui, o feedback ser√° dado pela UI
                comando_processado = True
            elif "retomar anota√ß√£o" in texto_transcrito_lower:
                st.session_state.listening_active = True
                st.session_state.last_transcription_segment = "" # Limpa para n√£o mostrar o comando
                # N√£o st.rerun() aqui, o feedback ser√° dado pela UI
                comando_processado = True

            # --- L√≥gica de Comandos de Voz de Abertura de Ficha ---
            # Estes comandos ainda for√ßar√£o um rerun, causando uma pequena interrup√ß√£o no √°udio.
            # √â uma limita√ß√£o atual para garantir que a UI se atualize com a nova ficha.

            # Comando: "abrir ficha de [tipo da ficha padr√£o]" ou "mostrar [tipo da ficha padr√£o]"
            match_abrir_ficha_padrao = re.search(r"(?:abrir|mostrar) ficha de (.+)", texto_transcrito_lower)
            if match_abrir_ficha_padrao and not comando_processado:
                ficha_solicitada = match_abrir_ficha_padrao.group(1).strip()
                if ficha_solicitada in st.session_state.fichas_pdf:
                    st.session_state.paciente_atual = None # Reseta o paciente atual ao abrir ficha padr√£o
                    st.session_state.tipo_ficha_aberta = ficha_solicitada # Define o tipo de ficha aberta
                    st.session_state.transcricao_geral = st.session_state.fichas_pdf[ficha_solicitada] # Carrega o texto da ficha no campo geral
                    
                    # NOVO: Ao abrir uma ficha padr√£o, resetar os campos espec√≠ficos do formul√°rio
                    for key in FORM_FIELDS_MAP.values():
                        st.session_state[key] = "" 
                    
                    st.session_state.active_form_field = None # Reseta campo de formul√°rio ativo
                    st.success(f"Ficha padr√£o '{ficha_solicitada.title()}' aberta e texto carregado!")
                    st.rerun() # For√ßa a atualiza√ß√£o da UI
                    comando_processado = True
                else:
                    st.warning(f"Comando de ficha padr√£o '{ficha_solicitada}' n√£o reconhecido.")
                    # N√£o set comando_processado=True aqui se n√£o achou a ficha,
                    # para permitir que a transcri√ß√£o normal continue, caso seja apenas uma frase.

            # Comando: "abrir ficha do paciente [nome do paciente] (de|da)? [tipo da ficha]"
            match_abrir_paciente_ficha = re.search(r"abrir ficha do paciente (.+?) (?:de|da)? (.+)", texto_transcrito_lower)
            if match_abrir_paciente_ficha and not comando_processado:
                nome_paciente_falado = match_abrir_paciente_ficha.group(1).strip()
                tipo_ficha_falado = match_abrir_paciente_ficha.group(2).strip()
                
                found_patient = None
                # Busca flex√≠vel: verifica se o nome falado est√° contido no nome do paciente no "DB"
                for p_name_db in st.session_state.pacientes:
                    if nome_paciente_falado in p_name_db: 
                        found_patient = p_name_db
                        break

                if found_patient:
                    if tipo_ficha_falado in st.session_state.pacientes[found_patient]:
                        st.session_state.paciente_atual = found_patient
                        st.session_state.tipo_ficha_aberta = tipo_ficha_falado
                        # NOVO: Carrega o texto da ficha do paciente diretamente para o campo geral para o prazo de hoje.
                        # O mapeamento para campos espec√≠ficos √© mais complexo.
                        st.session_state.transcricao_geral = st.session_state.pacientes[found_patient][tipo_ficha_falado]
                        
                        # NOVO: Limpa os campos espec√≠ficos do formul√°rio ao abrir ficha de paciente
                        for key in FORM_FIELDS_MAP.values():
                            st.session_state[key] = ""
                        
                        st.session_state.active_form_field = None # Reseta campo de formul√°rio ativo
                        st.success(f"Ficha '{tipo_ficha_falado.title()}' do paciente '{found_patient.title()}' aberta e texto carregado!")
                        st.rerun()
                        comando_processado = True
                    else:
                        st.warning(f"N√£o foi poss√≠vel encontrar a ficha '{tipo_ficha_falado.title()}' para o paciente '{found_patient.title()}'.")
                        comando_processado = True # Processou o comando, mas com erro
                else:
                    st.warning(f"Paciente '{nome_paciente_falado.title()}' n√£o encontrado.")
                    comando_processado = True # Processou o comando, mas com erro

            # Comando: "nova ficha de [tipo da ficha]"
            match_nova_ficha = re.search(r"nova ficha de (.+)", texto_transcrito_lower)
            if match_nova_ficha and not comando_processado:
                tipo_nova_ficha = match_nova_ficha.group(1).strip()
                st.session_state.paciente_atual = None
                st.session_state.tipo_ficha_aberta = f"Nova: {tipo_nova_ficha}"
                st.session_state.transcricao_geral = "" # Zera a transcri√ß√£o geral para nova ficha
                
                # NOVO: Zera todos os campos do formul√°rio para nova ficha
                for key in FORM_FIELDS_MAP.values():
                    st.session_state[key] = ""
                
                st.session_state.active_form_field = FORM_FIELDS_ORDER[0] if FORM_FIELDS_ORDER else None # Ativa o primeiro campo
                if st.session_state.active_form_field:
                    st.info(f"Preparando para nova ficha: '{tipo_nova_ficha.title()}'. Comece a ditar no campo **{st.session_state.active_form_field.replace('_', ' ').title()}**.")
                else:
                    st.info(f"Preparando para nova ficha: '{tipo_nova_ficha.title()}'. N√£o h√° campos definidos. Dite em observa√ß√µes gerais.")
                st.rerun()
                comando_processado = True

            # --- L√≥gica de Comandos de Voz para Navega√ß√£o entre Campos do Formul√°rio ---

            # Comando: "Preencher [nome do campo]"
            match_preencher_campo = re.search(r"preencher (.+)", texto_transcrito_lower)
            if match_preencher_campo and not comando_processado:
                campo_falado = match_preencher_campo.group(1).strip()
                found_field_key = None
                # Busca o campo que mais se assemelha ou que cont√©m a palavra chave
                for friendly_name, field_key in FORM_FIELDS_MAP.items():
                    if campo_falado in friendly_name: # Busca parcial para maior flexibilidade
                        found_field_key = field_key
                        break
                
                if found_field_key:
                    st.session_state.active_form_field = found_field_key
                    # st.info j√° √© atualizado na UI, n√£o precisamos de rerun aqui se o estado j√° foi setado
                    comando_processado = True
                    st.session_state.last_transcription_segment = "" # Limpa o segmento para n√£o adicionar o comando ao campo
                    st.rerun() # Ainda necess√°rio para for√ßar o destaque
